<!--
ARCHES - a program developed to inventory and manage immovable cultural heritage.
Copyright (C) 2013 J. Paul Getty Trust and World Monuments Fund

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
{% load static %}
{% load i18n %}
{% load compress %}

<!DOCTYPE html>
<!--[if IE 8]> <html lang="en" class="ie8"> <![endif]-->
<!--[if IE 9]> <html lang="en" class="ie9"> <![endif]-->
<!--[if !IE]><!--> <html lang="en"> <!--<![endif]-->

{% if use_livereload %}
    <script>document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':{{ livereload_port }}/livereload.js?snipver=1"></' + 'script>')</script>
{% endif %}

<head>
    <title>{% block title %}{{ app_settings.APP_NAME }} - {% endblock title %}</title>

    <!-- Meta -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <link rel="shortcut icon" href="{% static 'img/logos/favicon_dataspace.svg' %}" />

    {% block css %}
        {% compress css %}
        <link type="text/x-scss" href="{% static 'css/arches.scss' %}" rel="stylesheet" media="screen">
    	{% endcompress %}
        {% if app_settings.ACCESSIBILITY_MODE %}
        <link href="{% static 'css/accessibility.css' %}" rel="stylesheet">
        {% endif %}
        <link href="{% static 'css/package.css' %}" rel="stylesheet">
        <link href="{% static 'css/project.css' %}" rel="stylesheet">
        <link href="{% static 'css/ds_colors.css' %}" rel="stylesheet">

    {% endblock css%}

    <script src="https://cdn.jsdelivr.net/npm/tify@0.28.1/dist/tify.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tify@0.28.1/dist/tify.css">

</head>

<body {% block body_attributes %}class="scroll-y-auto"{% endblock %}>
    {% block loading_mask %}

    <div class="loading-mask" data-bind="visible: typeof(loading()) === 'boolean' && loading()"></div>

    <div class="loading-mask" style="display: none;" data-bind="visible: typeof(loading()==='string') && loading().length > 0">
        <div class="loading-mask-string" data-bind="text: loading"></div>
    </div>


    {% endblock loading_mask %}
    {% block body %}

    {% endblock body %}
</body>

{% block javascript %}
    <script src="{{ STATIC_URL }}packages/requirejs/require.js"></script>

    {% block pre_require_js %}
    {% endblock pre_require_js %}

    {% include 'javascript.htm' %}

    <script>
        require(["nifty"{% if main_script %},"{{ main_script }}"{% endif %}]);
    </script>

    {% if app_settings.GOOGLE_ANALYTICS_TRACKING_ID != None %}

        <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', '{{app_settings.GOOGLE_ANALYTICS_TRACKING_ID}}', 'auto');
            ga('send', 'pageview');
        </script>

    {% endif %}

    <!-- This is the brutal code you need -->
    <script type="module">

        function createTify(element, urlManifest) {
            // Create a wrapper div element
            const wrapper = document.createElement('div');
            wrapper.classList.add('tify-wrapper'); // Add CSS class for styling

            // Insert the Tify code within the wrapper
            const tify = new Tify({
                container: wrapper,
                manifestUrl: urlManifest,
                fullScreen: true
            });
        
            // Insert the wrapper before the target element
            element.parentNode.insertBefore(wrapper, element);
        }
        
        
        // Define a function to process the elements
        function processElements(elements) {
            for (const element of elements) {
                console.log(element.textContent);
                if (element.textContent === 'Manifest URL') {
                    const ddElement = element.nextElementSibling;
            
                    // Retrieve the URL from the <dd> element
                    const urlManifest = ddElement.textContent.trim();
            
                    createTify(element, urlManifest);
                    // Optionally, if you need to stop iterating after the first match, you can add a return statement here.
                }
            
            }
        }

        // Check if the page is on the 'report' location
        if (location.href.includes('report')) {
            const observer = new MutationObserver((mutationsList) => {
                // Check if the desired elements are now available in the DOM
                const listOfElements = document.querySelectorAll('dt[data-bind="text: label"]');
                if (listOfElements.length > 0) {
                    // Disconnect the observer as the elements are found
                    observer.disconnect();

                    // Process the elements
                    processElements(listOfElements);
                }
            });

            // Start observing changes in the DOM
            observer.observe(document.body, { childList: true, subtree: true });
        }

    </script>

{% endblock javascript %}

</html>
